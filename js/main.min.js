(function () {
  'use strict';

  var particlesConfig = {};
  var windowWidth = document.documentElement.clientWidth;

  if (windowWidth > 1400) {
    particlesConfig = {
      number: 290,
      size: 10,
      speed: 4
    };
  } else if (windowWidth > 1023) {
    particlesConfig = {
      number: 210,
      size: 9,
      speed: 4
    };
  } else if (windowWidth > 767) {
    particlesConfig = {
      number: 170,
      size: 8,
      speed: 4
    };
  } else {
    particlesConfig = {
      number: 100,
      size: 6,
      speed: 3
    };
  }

  particlesJS('particles', {
    "particles": {
      "number": {
        "value": particlesConfig.number,
        "density": {
          "enable": false,
          "value_area": 1000
        }
      },
      "color": {
        "value": "#999999"
      },
      "shape": {
        "type": "edge",
        "stroke": {
          "width": 0,
          "color": "#999999"
        },
        "polygon": {
          "nb_sides": 5
        },
        "image": {
          "src": "img/github.svg",
          "width": 100,
          "height": 100
        }
      },
      "opacity": {
        "value": 0.2,
        "random": false,
        "anim": {
          "enable": false,
          "speed": 1,
          "opacity_min": 0.1,
          "sync": false
        }
      },
      "size": {
        "value": particlesConfig.size,
        "random": true,
        "anim": {
          "enable": false,
          "speed": 80,
          "size_min": 0.1,
          "sync": false
        }
      },
      "line_linked": {
        "enable": false,
        "distance": 300,
        "color": "#ffffff",
        "opacity": 0.4,
        "width": 2
      },
      "move": {
        "enable": true,
        "speed": particlesConfig.speed,
        "direction": "bottom-right",
        "random": false,
        "straight": false,
        "out_mode": "out",
        "bounce": false,
        "attract": {
          "enable": false,
          "rotateX": 600,
          "rotateY": 1200
        }
      }
    },
    "interactivity": {
      "detect_on": "window",
      "events": {
        "onhover": {
          "enable": false,
          "mode": "repulse"
        },
        "onclick": {
          "enable": true,
          "mode": "push"
        },
        "resize": true
      },
      "modes": {
        "grab": {
          "distance": 800,
          "line_linked": {
            "opacity": 1
          }
        },
        "bubble": {
          "distance": 800,
          "size": 80,
          "duration": 2,
          "opacity": 0.8,
          "speed": 3
        },
        "repulse": {
          "distance": 50,
          "duration": 0.1
        },
        "push": {
          "particles_nb": 4
        },
        "remove": {
          "particles_nb": 2
        }
      }
    },
    "retina_detect": true
  });

  var CURSOR_RADIUS = 20;
  var CANVAS_WIDTH = 480;
  var CANVAS_HEIGHT = 200;
  var canvas = document.querySelector('#canvas');

  if (canvas && document.documentElement.clientWidth > 1100) {
    var ctx = canvas.getContext('2d');
    var rect = canvas.getBoundingClientRect();
    var mousePosition = {};
    var balls = [];

    var drawBall = function drawBall(x, y, radius, color) {
      ctx.save();
      ctx.beginPath();
      ctx.arc(x, y, radius, 0, 2 * Math.PI);
      ctx.fillStyle = color;
      ctx.fill();
      ctx.closePath();
      ctx.restore();
    };

    var drawSquare = function drawSquare(x, y, width, height, color) {
      ctx.save();
      ctx.beginPath();
      ctx.rect(x, y, width, height);
      ctx.fillStyle = color;
      ctx.fill();
      ctx.closePath();
      ctx.restore();
    };

    var onCanvasMouseMove = function onCanvasMouseMove(evt) {
      mousePosition = {
        x: evt.clientX - rect.left,
        y: evt.clientY - rect.top
      };
    };

    var createSquareSet = function createSquareSet(width, countVertical, countHorizontal) {
      var items = [];

      for (var i = 0; i < countHorizontal; i++) {
        for (var j = 0; j < countVertical; j++) {
          var coorX = width + width * j;
          var coorY = width + width * i;
          items.push({
            x: coorX,
            y: coorY,
            originalX: coorX,
            originalY: coorY,
            vx: 0,
            vy: 0,
            friction: 0.91,
            springFactor: 0.04
          });
        }
      }

      return items;
    };

    var think = function think(mousePos, ball) {
      var dx = ball.x - mousePos.x;
      var dy = ball.y - mousePos.y;

      var dist = Math.sqrt(dx * dx + dy * dy);

      if (dist < CURSOR_RADIUS) {
        var angle = Math.atan2(dy, dx);
        var tx = mousePos.x + Math.cos(angle) * CURSOR_RADIUS;
        var ty = mousePos.y + Math.sin(angle) * CURSOR_RADIUS;

        ball.vx += tx - ball.x;
        ball.vy += ty - ball.y;
      }

      var dx1 = -(ball.x - ball.originalX);
      var dy1 = -(ball.y - ball.originalY);

      ball.vx += dx1 * ball.springFactor;
      ball.vy += dy1 * ball.springFactor;

      ball.vx *= ball.friction;
      ball.vy *= ball.friction;

      ball.x += ball.vx;
      ball.y += ball.vy;

      return ball;
    };

    canvas.addEventListener('mousemove', onCanvasMouseMove);

    canvas.addEventListener('mouseout', function () {
      mousePosition = {
        x: 0,
        y: 0
      };
    });

    balls = createSquareSet(20, 22, 8);

    var render = function render() {
      var animationFrameId = window.requestAnimationFrame(render);
      ctx.clearRect(0, 0, CANVAS_WIDTH, CANVAS_HEIGHT);
      drawBall(mousePosition.x, mousePosition.y, CURSOR_RADIUS, '#fff');

      balls.forEach(function (ball) {
        think(mousePosition, ball);
        drawSquare(ball.x, ball.y, 20, 20, 'rgba(208, 208, 208, 0.7)');
      });
    };

    render();
  }

  var openButton = document.querySelector(".hero__button");
  var layout = document.querySelector(".layout");
  var hero = document.querySelector(".hero");
  var cv = document.querySelector(".cv");
  var closeButton = document.querySelector(".cv-close");
  var social = document.querySelector(".social");

  var openCv = function openCv() {
    window.location.hash = 'cv';
    document.body.classList.add("scrollable");
    layout.classList.add("layout--visible");
    hero.classList.add("hero--translated");
    social.classList.add("social--hidden");
    closeButton.addEventListener("click", onCloseButtonClick);
    setTimeout(function () {
      layout.classList.add("layout--collapsed");
    }, 500);
    setTimeout(function () {
      cv.classList.add("cv--visible");
      closeButton.classList.add("cv-close--active");
    }, 650);
  };

  var onCloseButtonClick = function onCloseButtonClick() {
    window.location.hash = 'home';
    document.body.classList.remove("scrollable");
    layout.classList.remove("layout--collapsed");
    closeButton.classList.remove("cv-close--active");
    cv.classList.remove("cv--visible");
    setTimeout(function () {
      layout.classList.remove("layout--visible");
      hero.classList.remove("hero--translated");
      social.classList.remove("social--hidden");
    }, 500);
    closeButton.removeEventListener("click", onCloseButtonClick);
  };

  openButton.addEventListener("click", openCv);

  if (window.location.hash === "#cv") {
    setTimeout(function () {
      openCv();
    }, 1000);
  }

  var MAX_SKILL_NUMBER = 10;
  var SKILLS = [{
    title: "HTML",
    number: 9
  }, {
    title: "CSS",
    number: 9
  }, {
    title: "Javascript",
    number: 6
  }, {
    title: "PHP",
    number: 6
  }, {
    title: "Wordpress",
    number: 8
  }, {
    title: "Drupal 8",
    number: 5
  }];
  var template = document.querySelector("#skill-template");
  var skillsList = document.querySelector(".skills__list");

  if (template && skillsList) {
    var fragment = document.createDocumentFragment();

    for (var i = 0; i < SKILLS.length; i++) {
      var skill = template.content.cloneNode(true);
      var title = skill.querySelector(".skill__title");
      var number = skill.querySelector(".skill__number");
      var indicator = skill.querySelector(".skill__indicator");
      var indicatorIcons = indicator.querySelectorAll(".skill__indicator-icon");
      var fragmentIndicator = document.createDocumentFragment();

      for (var j = 0; j < MAX_SKILL_NUMBER; j++) {
        var icon = void 0;
        if (j < SKILLS[i].number) {
          icon = indicatorIcons[0].cloneNode(true);
        } else {
          icon = indicatorIcons[1].cloneNode(true);
        }
        fragmentIndicator.appendChild(icon);
      }

      title.textContent = SKILLS[i].title;
      number.textContent = SKILLS[i].number + '/' + MAX_SKILL_NUMBER;
      indicator.innerHTML = "";
      indicator.appendChild(fragmentIndicator);
      fragment.appendChild(skill);
    }
    skillsList.appendChild(fragment);
  }

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule(fn, module) {
    return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var rellax = createCommonjsModule(function (module) {
    // ------------------------------------------
    // Rellax.js
    // Buttery smooth parallax library
    // Copyright (c) 2016 Moe Amaya (@moeamaya)
    // MIT license
    //
    // Thanks to Paraxify.js and Jaime Cabllero
    // for parallax concepts
    // ------------------------------------------

    (function (root, factory) {
      if (typeof undefined === 'function' && undefined.amd) {
        // AMD. Register as an anonymous module.
        undefined([], factory);
      } else if (module.exports) {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory();
      } else {
        // Browser globals (root is window)
        root.Rellax = factory();
      }
    })(commonjsGlobal, function () {
      var Rellax = function Rellax(el, options) {

        var self = Object.create(Rellax.prototype);

        var posY = 0;
        var screenY = 0;
        var posX = 0;
        var screenX = 0;
        var blocks = [];
        var pause = true;

        // check what requestAnimationFrame to use, and if
        // it's not supported, use the onscroll event
        var loop = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (callback) {
          setTimeout(callback, 1000 / 60);
        };

        // check which transform property to use
        var transformProp = window.transformProp || function () {
          var testEl = document.createElement('div');
          if (testEl.style.transform === null) {
            var vendors = ['Webkit', 'Moz', 'ms'];
            for (var vendor in vendors) {
              if (testEl.style[vendors[vendor] + 'Transform'] !== undefined) {
                return vendors[vendor] + 'Transform';
              }
            }
          }
          return 'transform';
        }();

        // Default Settings
        self.options = {
          speed: -2,
          center: false,
          wrapper: null,
          round: true,
          vertical: true,
          horizontal: false,
          callback: function callback() {}
        };

        // User defined options (might have more in the future)
        if (options) {
          Object.keys(options).forEach(function (key) {
            self.options[key] = options[key];
          });
        }

        // By default, rellax class
        if (!el) {
          el = '.rellax';
        }

        // check if el is a className or a node
        var elements = typeof el === 'string' ? document.querySelectorAll(el) : [el];

        // Now query selector
        if (elements.length > 0) {
          self.elems = elements;
        }

        // The elements don't exist
        else {
            throw new Error("The elements you're trying to select don't exist.");
          }

        // Has a wrapper and it exists
        if (self.options.wrapper) {
          if (!self.options.wrapper.nodeType) {
            var wrapper = document.querySelector(self.options.wrapper);

            if (wrapper) {
              self.options.wrapper = wrapper;
            } else {
              throw new Error("The wrapper you're trying to use don't exist.");
            }
          }
        }

        // Get and cache initial position of all elements
        var cacheBlocks = function cacheBlocks() {
          for (var i = 0; i < self.elems.length; i++) {
            var block = createBlock(self.elems[i]);
            blocks.push(block);
          }
        };

        // Let's kick this script off
        // Build array for cached element values
        var init = function init() {
          for (var i = 0; i < blocks.length; i++) {
            self.elems[i].style.cssText = blocks[i].style;
          }

          blocks = [];

          screenY = window.innerHeight;
          screenX = window.innerWidth;
          setPosition();

          cacheBlocks();

          // If paused, unpause and set listener for window resizing events
          if (pause) {
            window.addEventListener('resize', init);
            pause = false;
          }
          animate();
        };

        // We want to cache the parallax blocks'
        // values: base, top, height, speed
        // el: is dom object, return: el cache values
        var createBlock = function createBlock(el) {
          var dataPercentage = el.getAttribute('data-rellax-percentage');
          var dataSpeed = el.getAttribute('data-rellax-speed');
          var dataZindex = el.getAttribute('data-rellax-zindex') || 0;

          // initializing at scrollY = 0 (top of browser), scrollX = 0 (left of browser)
          // ensures elements are positioned based on HTML layout.
          //
          // If the element has the percentage attribute, the posY and posX needs to be
          // the current scroll position's value, so that the elements are still positioned based on HTML layout
          var wrapperPosY = self.options.wrapper ? self.options.wrapper.scrollTop : window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
          var posY = self.options.vertical ? dataPercentage || self.options.center ? wrapperPosY : 0 : 0;
          var posX = self.options.horizontal ? dataPercentage || self.options.center ? window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft : 0 : 0;

          var blockTop = posY + el.getBoundingClientRect().top;
          var blockHeight = el.clientHeight || el.offsetHeight || el.scrollHeight;

          var blockLeft = posX + el.getBoundingClientRect().left;
          var blockWidth = el.clientWidth || el.offsetWidth || el.scrollWidth;

          // apparently parallax equation everyone uses
          var percentageY = dataPercentage ? dataPercentage : (posY - blockTop + screenY) / (blockHeight + screenY);
          var percentageX = dataPercentage ? dataPercentage : (posX - blockLeft + screenX) / (blockWidth + screenX);
          if (self.options.center) {
            percentageX = 0.5;percentageY = 0.5;
          }

          // Optional individual block speed as data attr, otherwise global speed
          var speed = dataSpeed ? dataSpeed : self.options.speed;

          var bases = updatePosition(percentageX, percentageY, speed);

          // ~~Store non-translate3d transforms~~
          // Store inline styles and extract transforms
          var style = el.style.cssText;
          var transform = '';

          // Check if there's an inline styled transform
          if (style.indexOf('transform') >= 0) {
            // Get the index of the transform
            var index = style.indexOf('transform');

            // Trim the style to the transform point and get the following semi-colon index
            var trimmedStyle = style.slice(index);
            var delimiter = trimmedStyle.indexOf(';');

            // Remove "transform" string and save the attribute
            if (delimiter) {
              transform = " " + trimmedStyle.slice(11, delimiter).replace(/\s/g, '');
            } else {
              transform = " " + trimmedStyle.slice(11).replace(/\s/g, '');
            }
          }

          return {
            baseX: bases.x,
            baseY: bases.y,
            top: blockTop,
            left: blockLeft,
            height: blockHeight,
            width: blockWidth,
            speed: speed,
            style: style,
            transform: transform,
            zindex: dataZindex
          };
        };

        // set scroll position (posY, posX)
        // side effect method is not ideal, but okay for now
        // returns true if the scroll changed, false if nothing happened
        var setPosition = function setPosition() {
          var oldY = posY;
          var oldX = posX;

          posY = self.options.wrapper ? self.options.wrapper.scrollTop : (document.documentElement || document.body.parentNode || document.body).scrollTop || window.pageYOffset;
          posX = self.options.wrapper ? self.options.wrapper.scrollLeft : (document.documentElement || document.body.parentNode || document.body).scrollLeft || window.pageXOffset;

          if (oldY != posY && self.options.vertical) {
            // scroll changed, return true
            return true;
          }

          if (oldX != posX && self.options.horizontal) {
            // scroll changed, return true
            return true;
          }

          // scroll did not change
          return false;
        };

        // Ahh a pure function, gets new transform value
        // based on scrollPosition and speed
        // Allow for decimal pixel values
        var updatePosition = function updatePosition(percentageX, percentageY, speed) {
          var result = {};
          var valueX = speed * (100 * (1 - percentageX));
          var valueY = speed * (100 * (1 - percentageY));

          result.x = self.options.round ? Math.round(valueX) : Math.round(valueX * 100) / 100;
          result.y = self.options.round ? Math.round(valueY) : Math.round(valueY * 100) / 100;

          return result;
        };

        // Loop
        var update = function update() {
          if (setPosition() && pause === false) {
            animate();
          }

          // loop again
          loop(update);
        };

        // Transform3d on parallax element
        var animate = function animate() {
          var positions;
          for (var i = 0; i < self.elems.length; i++) {
            var percentageY = (posY - blocks[i].top + screenY) / (blocks[i].height + screenY);
            var percentageX = (posX - blocks[i].left + screenX) / (blocks[i].width + screenX);

            // Subtracting initialize value, so element stays in same spot as HTML
            positions = updatePosition(percentageX, percentageY, blocks[i].speed); // - blocks[i].baseX;
            var positionY = positions.y - blocks[i].baseY;
            var positionX = positions.x - blocks[i].baseX;

            var zindex = blocks[i].zindex;

            // Move that element
            // (Set the new translation and append initial inline transforms.)
            var translate = 'translate3d(' + (self.options.horizontal ? positionX : '0') + 'px,' + (self.options.vertical ? positionY : '0') + 'px,' + zindex + 'px) ' + blocks[i].transform;
            self.elems[i].style[transformProp] = translate;
          }
          self.options.callback(positions);
        };

        self.destroy = function () {
          for (var i = 0; i < self.elems.length; i++) {
            self.elems[i].style.cssText = blocks[i].style;
          }

          // Remove resize event listener if not pause, and pause
          if (!pause) {
            window.removeEventListener('resize', init);
            pause = true;
          }
        };

        // Init
        init();

        // Start the loop
        update();

        // Allow to recalculate the initial values whenever we want
        self.refresh = init;

        return self;
      };
      return Rellax;
    });
  });

  //= include ../../node_modules/particles.js/particles.js
  var rellax$1 = new rellax('.rellax', {});
})();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
